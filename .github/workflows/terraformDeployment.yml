name: "TF Template Workflow"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  tflintRulesExcluded: ""
  tfLintAzureRulesVersion: v0.23.0
  tfLintVersion: v0.46.1
  tfsecVersion: v1.28.1
  imageName: opensouthws23
  TF_STORAGE_LOCATION: westeurope
  TF_BACKEND_RSG: tf-dependencies
  TF_BACKEND_STORAGE_ACCOUNT: tfstateoscodestg

jobs:
  check_acr_vulns:
    name: Container Registry assessment
    runs-on: ubuntu-latest
    outputs:
      tfsecOutcome: ${{ steps.tfsec-execution-acr.outcome }}
      tflintOutcome: ${{ steps.tflint-execution-acr.outcome }}

    steps:
      - uses: actions/checkout@v2
      - name: tflint acr
        id: tflint-execution-acr
        continue-on-error: true
        working-directory: ${{ github.workspace }}/src/container-registry
        run: |
          tfLintRulesExcluded=`for i in $(echo ${{ env.tflintRulesExcluded }} | sed "s/,/ /g"); do echo "--disable-rule=$i"; done`

          echo tflint --module -f sarif $tfLintRulesExcluded
          echo 'plugin "azurerm" {' >.tflint.hcl
          echo '  enabled = true' >>.tflint.hcl
          echo '}' >>.tflint.hcl
          mkdir -p .tflint.d/plugins
          cd .tflint.d/plugins

          curl -L "https://github.com/terraform-linters/tflint-ruleset-azurerm/releases/download/${{ env.tfLintAzureRulesVersion }}/tflint-ruleset-azurerm_linux_amd64.zip" -o tflint-AzRuleset.zip
          unzip tflint-AzRuleset.zip
          rm tflint-AzRuleset.zip
          chmod +x tflint-ruleset-azurerm

          docker run --rm -v "${{ github.workspace }}/src/container-registry:/data" -w="/data" -t ghcr.io/terraform-linters/tflint:${{ env.tfLintVersion }} -f sarif --module $tfLintRulesExcluded > ${{ github.workspace }}/src/container-registry/tflint-container-registry.sarif

      - name: tfsec acr
        id: tfsec-execution-acr
        continue-on-error: true
        run: |
          docker run --rm -v "${{ github.workspace }}/src/container-registry:/src" aquasec/tfsec:${{ env.tfsecVersion }} --format sarif /src > ${{ github.workspace }}/src/container-registry/tfsec-container-registry.sarif

      - name: Upload tflint SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./src/container-registry/tflint-container-registry.sarif

      - name: Upload tfsec SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./src/container-registry/tfsec-container-registry.sarif

  check_vm_vulns:
    name: VM assessment
    runs-on: ubuntu-latest
    outputs:
      tfsecOutcome: ${{ steps.tfsec-execution-vm.outcome }}
      tflintOutcome: ${{ steps.tflint-execution-vm.outcome }}

    steps:
      - uses: actions/checkout@v2
      - name: tflint vm services
        id: tflint-execution-vm
        continue-on-error: true
        working-directory: ${{ github.workspace }}/src/vm
        run: |
          tfLintRulesExcluded=`for i in $(echo ${{ env.tflintRulesExcluded }} | sed "s/,/ /g"); do echo "--disable-rule=$i"; done`

          echo tflint --module -f sarif $tfLintRulesExcluded
          echo 'plugin "azurerm" {' >.tflint.hcl
          echo '  enabled = true' >>.tflint.hcl
          echo '}' >>.tflint.hcl
          mkdir -p .tflint.d/plugins
          cd .tflint.d/plugins

          curl -L "https://github.com/terraform-linters/tflint-ruleset-azurerm/releases/download/${{ env.tfLintAzureRulesVersion }}/tflint-ruleset-azurerm_linux_amd64.zip" -o tflint-AzRuleset.zip
          unzip tflint-AzRuleset.zip
          rm tflint-AzRuleset.zip
          chmod +x tflint-ruleset-azurerm

          docker run --rm -v "${{ github.workspace }}/src/vm:/data" -w="/data" -t ghcr.io/terraform-linters/tflint:${{ env.tfLintVersion }} -f sarif --module $tfLintRulesExcluded > ${{ github.workspace }}/src/vm/tflint-app-services.sarif

      - name: tfsec vm services
        id: tfsec-execution-vm
        continue-on-error: true
        run: |
          docker run --rm -v "${{ github.workspace }}/src/vm:/src" aquasec/tfsec:${{ env.tfsecVersion }} --format sarif /src > ${{ github.workspace }}/src/vm/tfsec-app-services.sarif

      - name: Upload tflint vm SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./src/vm/tflint-app-services.sarif

      - name: Upload tfsec vm SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./src/vm/tfsec-app-services.sarif

  deploment:
    name: Deployment
    needs: [check_acr_vulns, check_vm_vulns]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Create Resource Group and Storage Account for TF State
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -l ${{ env.TF_STORAGE_LOCATION }} -n ${{ env.TF_BACKEND_RSG }}
            az storage account create -n ${{ env.TF_BACKEND_STORAGE_ACCOUNT }} -g ${{ env.TF_BACKEND_RSG }} -l ${{ env.TF_STORAGE_LOCATION }} --sku Standard_LRS --https-only $true --min-tls-version TLS1_2
            az storage container create -n tfstate --account-name ${{ env.TF_BACKEND_STORAGE_ACCOUNT }}

      - name: ACR TF Deployment
        if: needs.check_acr_vulns.outputs.tfsecOutcome == 'success' && needs.check_acr_vulns.outputs.tflintOutcome == 'success'
        working-directory: ./src/container-registry
        run: |
          terraform init
          terraform validate
          terraform plan -out tfplan
          terraform apply --auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Build docker image
        working-directory: .
        run: |
          docker build -t ${{ env.imageName }}:${{ github.run_number }} -f Dockerfile .
          docker tag "${{ env.imageName }}:${{ github.run_number }}" "opensouthcode23jl.azurecr.io/${{ env.imageName }}:latest"

      # Run analyzers
      - name: Run Microsoft Security DevOps Analysis
        uses: microsoft/security-devops-action@preview
        continue-on-error: true
        id: msdo
        env:
          GDN_TRIVY_ACTION: image
          GDN_TRIVY_TARGET: "opensouthcode23jl.azurecr.io/${{ env.imageName }}:latest"
        with:
          tools: "trivy"

      # Upload alerts to the Security tab
      - name: Upload alerts to Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.msdo.outputs.sarifFile }}

      - name: Push Docker image
        run: |
          az acr login -n opensouthcode23jl
          docker push opensouthcode23jl.azurecr.io/${{ env.imageName }}:latest

      - name: VM TF Deployment
        if: needs.check_vm_vulns.outputs.tfsecOutcome != 'success' && needs.check_vm_vulns.outputs.tflintOutcome == 'success'
        working-directory: ./src/vm
        run: |
          terraform init
          terraform validate
          terraform plan -out tfplan
          terraform apply --auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
